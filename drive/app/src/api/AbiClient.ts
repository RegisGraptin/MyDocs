/** @generated by @calimero/abi-codegen â€” DO NOT EDIT. */

import {
  CalimeroApp,
  Context,
} from '@calimero-network/calimero-client';

// Generated types

export type DocOpPayload =
  | { name: 'Insert'; payload: DocOp_Insert }
  | { name: 'Delete'; payload: DocOp_Delete }

export const DocOp = {
  Insert: (insert: DocOp_Insert): DocOpPayload => ({ name: 'Insert', payload: insert }),
  Delete: (delete_: DocOp_Delete): DocOpPayload => ({ name: 'Delete', payload: delete_ }),
} as const;

export interface DocOp_Delete {
  index: number;
  len: number;
}

export interface DocOp_Insert {
  index: number;
  content: string;
}

export interface DocumentView {
  content: string;
  version: number;
  updated_ms: number;
  last_editor: string | null;
}

export interface PresenceEntry {
  address: string;
  last_seen_ms: number;
  payload: string;
}




export type AbiEvent =
  | { name: "DocumentCreated" }
  | { name: "DocumentUpdated" }
  | { name: "UserPing" }
;


/**
 * Utility class for handling byte conversions in Calimero
 */
export class CalimeroBytes {
  private data: Uint8Array;

  constructor(input: string | number[] | Uint8Array) {
    if (typeof input === "string") {
      // Hex string
      this.data = new Uint8Array(
        input.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || []
      );
    } else if (Array.isArray(input)) {
      // Number array
      this.data = new Uint8Array(input);
    } else {
      // Uint8Array
      this.data = input;
    }
  }

  toArray(): number[] {
    return Array.from(this.data);
  }

  toUint8Array(): Uint8Array {
    return this.data;
  }

  static fromHex(hex: string): CalimeroBytes {
    return new CalimeroBytes(hex);
  }

  static fromArray(arr: number[]): CalimeroBytes {
    return new CalimeroBytes(arr);
  }

  static fromUint8Array(bytes: Uint8Array): CalimeroBytes {
    return new CalimeroBytes(bytes);
  }
}

/**
 * Convert CalimeroBytes instances to arrays for WASM compatibility
 */
function convertCalimeroBytesForWasm(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (obj instanceof CalimeroBytes) {
    return obj.toArray();
  }

  if (Array.isArray(obj)) {
    return obj.map(item => convertCalimeroBytesForWasm(item));
  }

  if (typeof obj === "object") {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = convertCalimeroBytesForWasm(value);
    }
    return result;
  }

  return obj;
}

/**
 * Convert arrays back to CalimeroBytes instances from WASM responses
 */
function convertWasmResultToCalimeroBytes(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (Array.isArray(obj) && obj.every(item => typeof item === "number")) {
    return new CalimeroBytes(obj);
  }

  if (Array.isArray(obj)) {
    return obj.map(item => convertWasmResultToCalimeroBytes(item));
  }

  if (typeof obj === "object") {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = convertWasmResultToCalimeroBytes(value);
    }
    return result;
  }

  return obj;
}

export class AbiClient {
  private app: CalimeroApp;
  private context: Context;

  constructor(app: CalimeroApp, context: Context) {
    this.app = app;
    this.context = context;
  }

  /**
   * init
   */
  public async init(): Promise<void> {
    const response = await this.app.execute(this.context, 'init', {});
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * create_document
   */
  public async createDocument(params: { content: string }): Promise<number> {
    const response = await this.app.execute(this.context, 'create_document', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * apply_ops
   */
  public async applyOps(params: { ops: typeof DocOp[]; expected_version: number | null }): Promise<number> {
    const response = await this.app.execute(this.context, 'apply_ops', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * get_document
   */
  public async getDocument(): Promise<DocumentView> {
    const response = await this.app.execute(this.context, 'get_document', {});
    if (response.success) {
      return response.result as DocumentView;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * ping
   */
  public async ping(params: { addr: string; payload: string }): Promise<void> {
    const response = await this.app.execute(this.context, 'ping', params);
    console.log(params)
    console.log(response)
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * get_active_users
   */
  public async getActiveUsers(params: { ttl_ms: number | null }): Promise<PresenceEntry[]> {
    const response = await this.app.execute(this.context, 'get_active_users', params);
    if (response.success) {
      return response.result as PresenceEntry[];
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * purge_stale
   */
  public async purgeStale(params: { ttl_ms: number }): Promise<void> {
    const response = await this.app.execute(this.context, 'purge_stale', params);
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

}